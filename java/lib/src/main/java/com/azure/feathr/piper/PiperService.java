/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.azure.feathr.piper;

import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PiperService implements AutoCloseable {
    private static native long create(String pipelines, String lookups, Map<String, UserDefinedFunction> functions);

    private static native void start(long handle, String address, short port);

    private static native void stop(long handle);

    private static native void destroy(long handle);

    private final long svcHandle;

    static {
        // TODO: Dynamically loading
        System.out.println(System.getProperty("os.name"));
        System.out.println(System.getProperty("os.arch"));
        System.out.println("Working Directory = " + System.getProperty("user.dir"));
        System.setProperty("java.library.path", ".");
        System.loadLibrary("feathr_piper");
    }

    public PiperService(String pipelines, String lookups, UdfRepository repo) {
        svcHandle = create(pipelines, lookups, repo.udfMap);
    }

    public void start(String address, short port) {
        start(svcHandle, address, port);
    }

    public void stop() {
        stop(svcHandle);
    }

    @Override
    public void close() throws Exception {
        destroy(svcHandle);
    }

    static Object inc(Object arg) {
        long n = (long) arg;
        long m = n + 42;
        var map = new HashMap<String, Object>();
        map.put("m", m);
        var list = new ArrayList<Object>();
        list.add(m);
        map.put("list", list);
        map.put("instant", Instant.ofEpochSecond(m));
        throw  new RuntimeException("Something happened");
//        return map;
    }

    public static void main(String[] args) {
        Function1 f = PiperService::inc;
        var repo = new UdfRepository().put("inc", f);
        try (PiperService svc = new PiperService("t(x) | project y=inc(x);", "{}", repo)) {
            svc.start("localhost", (short) 8000);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
